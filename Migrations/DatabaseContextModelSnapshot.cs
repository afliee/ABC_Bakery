// <auto-generated />
using System;
using ABC_Bakery.Helpers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ABC_Bakery.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ABC_Bakery.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(943),
                            Name = "Bánh Mì",
                            UpdatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(945)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(947),
                            Name = "Bánh Ngọt",
                            UpdatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(952)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(953),
                            Name = "Bánh Kem Nhỏ",
                            UpdatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(953)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(954),
                            Name = "Bánh Kem",
                            UpdatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(955)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(956),
                            Name = "Bánh Đóng Gói",
                            UpdatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(956)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(957),
                            Name = "Bánh Bao",
                            UpdatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(958)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(959),
                            Name = "Bánh Theo Mùa",
                            UpdatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(959)
                        });
                });

            modelBuilder.Entity("ABC_Bakery.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Import", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UserId");

                    b.ToTable("Imports");
                });

            modelBuilder.Entity("ABC_Bakery.Models.ImportProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ImportId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductId", "ImportId");

                    b.HasIndex("ImportId");

                    b.ToTable("ImportDetails");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CashierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("PromotionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiptId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("CashierId");

                    b.HasIndex("PromotionId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ABC_Bakery.Models.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<int?>("ProductId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActived")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ratio")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "NONE",
                            CreatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(977),
                            IsActived = true,
                            Name = "Không có",
                            Ratio = 0,
                            UpdatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(978)
                        },
                        new
                        {
                            Id = 2,
                            Code = "ABCNGON",
                            CreatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(983),
                            IsActived = true,
                            Name = "Giảm 10%",
                            Ratio = 10,
                            UpdatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(983)
                        },
                        new
                        {
                            Id = 3,
                            Code = "LATEAM",
                            CreatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(984),
                            IsActived = true,
                            Name = "Giảm 20%",
                            Ratio = 20,
                            UpdatedAt = new DateTime(2023, 11, 20, 20, 56, 44, 371, DateTimeKind.Local).AddTicks(985)
                        });
                });

            modelBuilder.Entity("ABC_Bakery.Models.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<double>("Expense")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReceiptType")
                        .HasColumnType("int");

                    b.Property<double>("Recieved")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Receipts");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cashier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Accounting"
                        });
                });

            modelBuilder.Entity("ABC_Bakery.Models.RolePermission", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("ABC_Bakery.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreateAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = "2023-11-20 20:56:44",
                            Name = "Admin",
                            Password = "admin",
                            RoleId = 1,
                            UpdatedAt = "2023-11-20 20:56:44"
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = "2023-11-20 20:56:44",
                            Name = "Cashier",
                            Password = "cashier",
                            RoleId = 2,
                            UpdatedAt = "2023-11-20 20:56:44"
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = "2023-11-20 20:56:44",
                            Name = "Accounting",
                            Password = "accounting",
                            RoleId = 3,
                            UpdatedAt = "2023-11-20 20:56:44"
                        });
                });

            modelBuilder.Entity("ABC_Bakery.Models.Image", b =>
                {
                    b.HasOne("ABC_Bakery.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Import", b =>
                {
                    b.HasOne("ABC_Bakery.Models.Supplier", "Supplier")
                        .WithMany("Imports")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC_Bakery.Models.User", "User")
                        .WithMany("Imports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ABC_Bakery.Models.ImportProduct", b =>
                {
                    b.HasOne("ABC_Bakery.Models.Import", "Import")
                        .WithMany("ImportDetails")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC_Bakery.Models.Product", "Product")
                        .WithMany("ImportDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Import");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Order", b =>
                {
                    b.HasOne("ABC_Bakery.Models.User", "Cashier")
                        .WithMany("Orders")
                        .HasForeignKey("CashierId");

                    b.HasOne("ABC_Bakery.Models.Promotion", null)
                        .WithMany("Orders")
                        .HasForeignKey("PromotionId");

                    b.HasOne("ABC_Bakery.Models.Receipt", "Receipt")
                        .WithMany("Orders")
                        .HasForeignKey("ReceiptId");

                    b.Navigation("Cashier");

                    b.Navigation("Receipt");
                });

            modelBuilder.Entity("ABC_Bakery.Models.OrderDetail", b =>
                {
                    b.HasOne("ABC_Bakery.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC_Bakery.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Product", b =>
                {
                    b.HasOne("ABC_Bakery.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ABC_Bakery.Models.RolePermission", b =>
                {
                    b.HasOne("ABC_Bakery.Models.Permission", "Permission")
                        .WithMany("Roles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ABC_Bakery.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ABC_Bakery.Models.User", b =>
                {
                    b.HasOne("ABC_Bakery.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Import", b =>
                {
                    b.Navigation("ImportDetails");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Permission", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ImportDetails");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Promotion", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Receipt", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ABC_Bakery.Models.Supplier", b =>
                {
                    b.Navigation("Imports");
                });

            modelBuilder.Entity("ABC_Bakery.Models.User", b =>
                {
                    b.Navigation("Imports");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
